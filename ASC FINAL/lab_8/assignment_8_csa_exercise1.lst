     1                                  ;Statement 23-th exercise 1: 
     2                                  
     3                                  ;Read a hexadecimal number with 2 digits from the keyboard. 
     4                                  ;Display the number in base 10, in both interpretations: as an unsigned number and as an signed number (on 8 bits).
     5                                  
     6                                  ; declaring extern functions used in the program
     7                                  extern exit, printf, scanf            
     8                                  import exit msvcrt.dll     
     9                                  import printf msvcrt.dll     ; indicating to the assembler that the printf fct can be found in the msvcrt.dll library
    10                                  import scanf msvcrt.dll      ; similar for scanf
    11                                  
    12                                  bits 32 ;assembling for the 32 bits architecture
    13                                  ; the start label will be the entry point in the program
    14                                  global  start 
    15                                  
    16                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    17                                  
    19                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    20                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    21                                          
    22                                  segment  data use32 class=data ; the data segment where the variables are declared 
    23 00000000 00000000                        n dd  0       ; defining the variable n
    24 00000004 6E3D0A0D00                      message  db "n=", 10, 13, 0
    25 00000009 74686520756E736967-             message1 db "the unsigned representation is :",10, 13, 0
    25 00000012 6E6564207265707265-
    25 0000001B 73656E746174696F6E-
    25 00000024 206973203A0A0D00   
    26 0000002C 746865207369676E65-             message2 db "the signed representation is :",10, 13, 0
    26 00000035 642072657072657365-
    26 0000003E 6E746174696F6E2069-
    26 00000047 73203A0A0D00       
    27                                          
    28 0000004D 257800                  		format  db "%x", 0  ; definining the format
    29 00000050 25750A0D00                      format1 db "%u",10, 13, 0  ;defining the unsigned format
    30 00000055 256400                          format2 db "%d", 0  ;defining the signed format 
    31                                          
    32                                  segment  code use32 class=code ; code segment
    33                                      start:
    34 00000000 68[04000000]                        push dword message ; ! on the stack is placed the address of the string, not its value
    35 00000005 FF15[00000000]                      call [printf]      ; call function printf for printing
    36 0000000B 83C404                              add esp, 4*1       ; free parameters on the stack; 4 = size of dword; 1 = number of parameters
    37                                              
    38                                      
    39 0000000E 68[00000000]                        push dword n  ;pushing the parameter on the stack from right to left
    40 00000013 68[4D000000]                        push dword format
    41 00000018 FF15[00000000]                      call [scanf]
    42 0000001E 83C408                              add esp, 4 * 2
    43                                              
    44 00000021 68[09000000]                        push dword message1
    45 00000026 FF15[00000000]                      call [printf]
    46 0000002C 83C404                              add esp, 4*1
    47                                              
    48 0000002F FF35[00000000]                      push dword [n]
    49 00000035 68[50000000]                        push dword format1
    50 0000003A FF15[00000000]                      call [printf]
    51 00000040 83C408                              add esp, 4 * 2
    52                                              
    53 00000043 68[2C000000]                        push dword message2
    54 00000048 FF15[00000000]                      call [printf]
    55 0000004E 83C404                              add esp, 4 * 1
    56                                              
    57 00000051 BB00010000                          mov ebx, 256
    58 00000056 BA00000000                          mov edx, 0
    59 0000005B 8B0D[00000000]                      mov ecx, [n]
    60 00000061 29D9                                sub ecx, ebx
    61 00000063 890D[00000000]                      mov [n], ecx
    62                                              
    63 00000069 FF35[00000000]                      push dword [n]
    64 0000006F 68[55000000]                        push dword format2
    65 00000074 FF15[00000000]                      call [printf]
    66 0000007A 83C408                              add esp, 4 * 2
    67                                              
    68                                              
    69                                              
    70                                          
    71 0000007D 6A00                        push   dword 0 ;saves on stack the parameter of the function exit
    72 0000007F FF15[00000000]              call   [exit] ; function exit is called in order to end the execution of
