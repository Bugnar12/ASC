;I will solve the 23-th problem from bitwise operations that states : 

;Given the byte A and the word B, compute the doubleword C as follows:
;the bits 24-31 of C are the same as the bits of A
;the bits 16-23 of C are the invert of the bits of the lowest byte of B
;the bits 10-15 of C have the value 1
;the bits 2-9 of C are the same as the bits of the highest byte of B
;the bits 0-1 both contain the value of the sign bit of A

;the formed number should be 001010110000110111111110011010000b

bits 32 ;assembling for the 32 bits architecture
; the start label will be the entry point in the program
global  start 

extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it

import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
        ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
segment  data use32 class=data ; the data segment where the variables are declared 
        a db 00101011b ;43 in decimal
        b dw 1001010011110010b ;38130 in decimal
        c dd 0
        
segment  code use32 class=code ; code segment
    start: 
        ;firstly we make the 24-31 bits from C the same as A
        ;we compute the result in cx
        
        mov ebx, 0 ;we compute the result in bx
        
        mov al, [a]
        and eax, 00000000000000000000000011111111b
        mov cl, 24
        rol eax, cl
        or ebx, eax ;we moved the bits from a into ebx
        
        ;lowest byte of B is the 0->7 bits : 11110010
        mov dx, [b]
        not dx ; we invert the bits of b
        and edx, 00000000000000000000000011111111b ; we isolate the lowest byte
        mov cl, 16
        rol edx, cl ;we move 16 positions to the left
        or ebx, edx ;we put the corresponding bits into ebx 
        
        ;bytes 10 -> 15 : value = 1    ebx = 0010101100101011111111
        mov edx, 00000000000000000000000000111111b
        mov cl, 10
        rol edx, cl ;we move 10 positions to the left
        or ebx, edx ;we fill with the bit 1 into ebx
        
        ;highest byte of B is represented by : 10010100
        mov edx, [b] ; now edx is 00000000000000001001010011110010
        and edx, 00000000000000001111111100000000b ; we isolate the corresponding byte
        mov cl, 2
        ror edx, cl; we move 2 positions to the left
        or ebx, edx ;we put the bits at the wanted position in ebx
        
        ;the sign bit of A is 0
        mov edx, [a] ; now edx is 00000000000000000000000000101011b
        and edx, 00000000000000000000000011000000b
        mov cl, 6
        ror edx, cl
        or ebx, edx
        
	
	push   dword 0 ;saves on stack the parameter of the function exit
	call   [exit] ; function exit is called in order to end the execution of